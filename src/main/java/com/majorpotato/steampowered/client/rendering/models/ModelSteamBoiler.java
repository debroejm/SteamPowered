// Date: 11/5/2014 8:07:14 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.majorpotato.steampowered.client.rendering.models;

import com.majorpotato.steampowered.util.Direction;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import org.lwjgl.opengl.GL11;

public class ModelSteamBoiler extends ModelBase
{
  //fields
  ModelRenderer SingleBody;
    ModelRenderer SingleTop;
    ModelRenderer CornerBody;
    ModelRenderer CornerTop;
    ModelRenderer EdgeBody;
    ModelRenderer EdgeTop;
    ModelRenderer Middle;
    ModelRenderer LengthPiece;

    boolean[] sides = new boolean[6];
  
  public ModelSteamBoiler()
  {
      textureWidth = 128;
      textureHeight = 64;

      sides[0] = false;
      sides[1] = false;
      sides[2] = false;
      sides[3] = false;
      sides[4] = false;
      sides[5] = false;

      SingleBody = new ModelRenderer(this, 48, 2);
      SingleBody.addBox(0F, 0F, 0F, 12, 16, 12);
      SingleBody.setRotationPoint(-6F, 8F, -6F);
      SingleBody.setTextureSize(128, 64);
      SingleBody.mirror = true;
      setRotation(SingleBody, 0F, 0F, 0F);
      SingleTop = new ModelRenderer(this, 32, 30);
      SingleTop.addBox(0F, 0F, 0F, 10, 1, 10);
      SingleTop.setRotationPoint(-5F, 7F, -5F);
      SingleTop.setTextureSize(128, 64);
      SingleTop.mirror = true;
      setRotation(SingleTop, 0F, 0F, 0F);
      CornerBody = new ModelRenderer(this, -14, 0);
      CornerBody.addBox(0F, 0F, 0F, 14, 16, 14);
      CornerBody.setRotationPoint(-8F, 8F, -6F);
      CornerBody.setTextureSize(128, 64);
      CornerBody.mirror = true;
      setRotation(CornerBody, 0F, 0F, 0F);
      CornerTop = new ModelRenderer(this, 3, 46);
      CornerTop.addBox(0F, 0F, 0F, 13, 1, 13);
      CornerTop.setRotationPoint(-8F, 7F, -5F);
      CornerTop.setTextureSize(128, 64);
      CornerTop.mirror = true;
      setRotation(CornerTop, 0F, 0F, 0F);
      EdgeBody = new ModelRenderer(this, 14, 0);
      EdgeBody.addBox(0F, 0F, 0F, 16, 16, 14);
      EdgeBody.setRotationPoint(-8F, 8F, -6F);
      EdgeBody.setTextureSize(128, 64);
      EdgeBody.mirror = true;
      setRotation(EdgeBody, 0F, 0F, 0F);
      EdgeTop = new ModelRenderer(this, -13, 46);
      EdgeTop.addBox(0F, 0F, 0F, 16, 1, 13);
      EdgeTop.setRotationPoint(-8F, 7F, -5F);
      EdgeTop.setTextureSize(128, 64);
      EdgeTop.mirror = true;
      setRotation(EdgeTop, 0F, 0F, 0F);
      Middle = new ModelRenderer(this, -16, 30);
      Middle.addBox(0F, 0F, 0F, 16, 17, 16);
      Middle.setRotationPoint(-8F, 7F, -8F);
      Middle.setTextureSize(128, 64);
      Middle.mirror = true;
      setRotation(Middle, 0F, 0F, 0F);
      LengthPiece = new ModelRenderer(this, 40, 2);
      LengthPiece.addBox(0F, 0F, 0F, 16, 16, 12);
      LengthPiece.setRotationPoint(-8F, 8F, -6F);
      LengthPiece.setTextureSize(128, 64);
      LengthPiece.mirror = true;
      setRotation(LengthPiece, 0F, 0F, 0F);
  }

    public void setSideRender(int side, boolean value) {
        if(side < 0 || side > sides.length-1) return;
        sides[side] = value;
    }

    public void setSideRender(Direction side, boolean value) {
        sides[side.ID()] = value;
    }

    public void setSideRender(boolean[] values) {
        if(values.length > 5)
        {
            sides[0] = values[0];
            sides[1] = values[1];
            sides[2] = values[2];
            sides[3] = values[3];
            sides[4] = values[4];
            sides[5] = values[5];
        }
    }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(entity, f, f1, f2, f3, f4, f5);

      GL11.glPushMatrix();

      if( sides[Direction.NORTH.ID()] && sides[Direction.SOUTH.ID()] && sides[Direction.EAST.ID()] && sides[Direction.WEST.ID()] ) {
          Middle.render(f5);
      }
      else if( sides[Direction.NORTH.ID()] && sides[Direction.EAST.ID()] && !sides[Direction.WEST.ID()] && !sides[Direction.SOUTH.ID()]) {
          GL11.glRotatef(-90.0f, 0, 1, 0);
          CornerBody.render(f5);
          CornerTop.render(f5);
      }
      else if( sides[Direction.NORTH.ID()] && !sides[Direction.EAST.ID()] && sides[Direction.WEST.ID()] && !sides[Direction.SOUTH.ID()]) {
          GL11.glRotatef(180.0f, 0, 1, 0);
          CornerBody.render(f5);
          CornerTop.render(f5);
      }
      else if( !sides[Direction.NORTH.ID()] && sides[Direction.EAST.ID()] && !sides[Direction.WEST.ID()] && sides[Direction.SOUTH.ID()]) {
          //GL11.glRotatef(-90.0f, 0, 1, 0);
          CornerBody.render(f5);
          CornerTop.render(f5);
      }
      else if( !sides[Direction.NORTH.ID()] && !sides[Direction.EAST.ID()] && sides[Direction.WEST.ID()] && sides[Direction.SOUTH.ID()]) {
          GL11.glRotatef(90.0f, 0, 1, 0);
          CornerBody.render(f5);
          CornerTop.render(f5);
      }
      else if( !sides[Direction.NORTH.ID()] && sides[Direction.EAST.ID()] && sides[Direction.WEST.ID()] && sides[Direction.SOUTH.ID()]) {
          EdgeBody.render(f5);
          EdgeTop.render(f5);
      }
      else if( sides[Direction.NORTH.ID()] && sides[Direction.EAST.ID()] && sides[Direction.WEST.ID()] && !sides[Direction.SOUTH.ID()]) {
          GL11.glRotatef(180.0f, 0, 1, 0);
          EdgeBody.render(f5);
          EdgeTop.render(f5);
      }
      else if( sides[Direction.NORTH.ID()] && !sides[Direction.EAST.ID()] && sides[Direction.WEST.ID()] && sides[Direction.SOUTH.ID()]) {
          GL11.glRotatef(90.0f, 0, 1, 0);
          EdgeBody.render(f5);
          EdgeTop.render(f5);
      }
      else if( sides[Direction.NORTH.ID()] && sides[Direction.EAST.ID()] && !sides[Direction.WEST.ID()] && sides[Direction.SOUTH.ID()]) {
          GL11.glRotatef(-90.0f, 0, 1, 0);
          EdgeBody.render(f5);
          EdgeTop.render(f5);
      }
      else if( !sides[Direction.NORTH.ID()] && sides[Direction.EAST.ID()] && sides[Direction.WEST.ID()] && !sides[Direction.SOUTH.ID()]) {
          //GL11.glRotatef(90.0f, 0, 1, 0);
          LengthPiece.render(f5);
      }
      else if( sides[Direction.NORTH.ID()] && !sides[Direction.EAST.ID()] && !sides[Direction.WEST.ID()] && sides[Direction.SOUTH.ID()]) {
          GL11.glRotatef(90.0f, 0, 1, 0);
          LengthPiece.render(f5);
      }
      else {
          SingleBody.render(f5);
          SingleTop.render(f5);
      }

      GL11.glPopMatrix();
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
