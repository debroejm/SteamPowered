// Date: 10/30/2014 1:16:34 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.majorpotato.steampowered.client.rendering.models;

import com.majorpotato.steampowered.util.Direction;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import org.lwjgl.opengl.GL11;

public class ModelFirebox extends ModelBase
{
  //fields
  ModelRenderer Fuel;
    ModelRenderer Bottom;
    ModelRenderer GrateFront;
    ModelRenderer GrateBack;
    ModelRenderer GrateLeft;
    ModelRenderer GrateRight;
    ModelRenderer WallRight;
    ModelRenderer WallRightMiddleCenter;
    ModelRenderer WallRightMiddleLeft;
    ModelRenderer WallRightMiddleRight;
    ModelRenderer WallLeft;
    ModelRenderer WallLeftMiddleCenter;
    ModelRenderer WallLeftMiddleLeft;
    ModelRenderer WallLeftMiddleRight;
    ModelRenderer WallBack;
    ModelRenderer WallBackMiddleCenter;
    ModelRenderer WallBackMiddleLeft;
    ModelRenderer WallBackMiddleRight;
    ModelRenderer WallFront;
    ModelRenderer WallFrontMiddleCenter;
    ModelRenderer WallFrontMiddleLeft;
    ModelRenderer WallFrontMiddleRight;
    ModelRenderer PillarFrontLeft;
    ModelRenderer PillarFrontRight;
    ModelRenderer PillarRearRight;
    ModelRenderer PillarRearLeft;

    boolean[] sides = {false, false, false, false, false, false};
    float currentFuelScale = 0.0F;
  
  public ModelFirebox()
  {
      textureWidth = 128;
      textureHeight = 32;

      Fuel = new ModelRenderer(this, 0, 0);
      Fuel.addBox(0F, -10F, 0F, 16, 10, 16);
      Fuel.setRotationPoint(-8F, 20F, -8F);
      Fuel.setTextureSize(128, 32);
      Fuel.mirror = true;
      setRotation(Fuel, 0F, 0F, 0F);
      Bottom = new ModelRenderer(this, 32, 0);
      Bottom.addBox(0F, 0F, 0F, 16, 4, 16);
      Bottom.setRotationPoint(-8F, 20F, -8F);
      Bottom.setTextureSize(128, 32);
      Bottom.mirror = true;
      setRotation(Bottom, 0F, 0F, 0F);
      GrateFront = new ModelRenderer(this, 0, 26);
      GrateFront.addBox(0F, 0F, 0F, 18, 6, 0);
      GrateFront.setRotationPoint(-9F, 13F, -9F);
      GrateFront.setTextureSize(128, 32);
      GrateFront.mirror = true;
      setRotation(GrateFront, 0F, 0F, 0F);
      GrateBack = new ModelRenderer(this, 0, 26);
      GrateBack.addBox(0F, 0F, 0F, 18, 6, 0);
      GrateBack.setRotationPoint(-9F, 13F, 9F);
      GrateBack.setTextureSize(128, 32);
      GrateBack.mirror = true;
      setRotation(GrateBack, 0F, 0F, 0F);
      GrateLeft = new ModelRenderer(this, 0, 8);
      GrateLeft.addBox(0F, 0F, 0F, 0, 6, 18);
      GrateLeft.setRotationPoint(9F, 13F, -9F);
      GrateLeft.setTextureSize(128, 32);
      GrateLeft.mirror = true;
      setRotation(GrateLeft, 0F, 0F, 0F);
      GrateRight = new ModelRenderer(this, 0, 8);
      GrateRight.addBox(0F, 0F, 0F, 0, 6, 18);
      GrateRight.setRotationPoint(-9F, 13F, -9F);
      GrateRight.setTextureSize(128, 32);
      GrateRight.mirror = true;
      setRotation(GrateRight, 0F, 0F, 0F);
      WallRight = new ModelRenderer(this, 92, 11);
      WallRight.addBox(0F, 0F, 0F, 2, 5, 16);
      WallRight.addBox(0F, 11F, 0F, 2, 5, 16);
      WallRight.setRotationPoint(-10F, 8F, -8F);
      WallRight.setTextureSize(128, 32);
      WallRight.mirror = true;
      setRotation(WallRight, 0F, 0F, 0F);
      WallRightMiddleCenter = new ModelRenderer(this, 85, 10);
      WallRightMiddleCenter.addBox(0F, 0F, 0F, 2, 6, 10);
      WallRightMiddleCenter.setRotationPoint(-10F, 13F, -5F);
      WallRightMiddleCenter.setTextureSize(128, 32);
      WallRightMiddleCenter.mirror = true;
      setRotation(WallRightMiddleCenter, 0F, 0F, 0F);
      WallRightMiddleLeft = new ModelRenderer(this, 59, 21);
      WallRightMiddleLeft.addBox(0F, 0F, 0F, 2, 6, 5);
      WallRightMiddleLeft.setRotationPoint(-10F, 13F, 5F);
      WallRightMiddleLeft.setTextureSize(128, 32);
      WallRightMiddleLeft.mirror = true;
      setRotation(WallRightMiddleLeft, 0F, 0F, 0F);
      WallRightMiddleRight = new ModelRenderer(this, 59, 21);
      WallRightMiddleRight.addBox(0F, 0F, 0F, 2, 6, 5);
      WallRightMiddleRight.setRotationPoint(-10F, 13F, -10F);
      WallRightMiddleRight.setTextureSize(128, 32);
      WallRightMiddleRight.mirror = true;
      setRotation(WallRightMiddleRight, 0F, 0F, 0F);
      WallLeft = new ModelRenderer(this, 92, 11);
      WallLeft.addBox(0F, 0F, 0F, 2, 5, 16);
      WallLeft.addBox(0F, 11F, 0F, 2, 5, 16);
      WallLeft.setRotationPoint(8F, 8F, -8F);
      WallLeft.setTextureSize(128, 32);
      WallLeft.mirror = true;
      setRotation(WallLeft, 0F, 0F, 0F);
      WallLeftMiddleCenter = new ModelRenderer(this, 85, 10);
      WallLeftMiddleCenter.addBox(0F, 0F, 0F, 2, 6, 10);
      WallLeftMiddleCenter.setRotationPoint(8F, 13F, -5F);
      WallLeftMiddleCenter.setTextureSize(128, 32);
      WallLeftMiddleCenter.mirror = true;
      setRotation(WallLeftMiddleCenter, 0F, 0F, 0F);
      WallLeftMiddleLeft = new ModelRenderer(this, 59, 21);
      WallLeftMiddleLeft.addBox(0F, 0F, 0F, 2, 6, 5);
      WallLeftMiddleLeft.setRotationPoint(8F, 13F, -10F);
      WallLeftMiddleLeft.setTextureSize(128, 32);
      WallLeftMiddleLeft.mirror = true;
      setRotation(WallLeftMiddleLeft, 0F, 0F, 0F);
      WallLeftMiddleRight = new ModelRenderer(this, 59, 21);
      WallLeftMiddleRight.addBox(0F, 0F, 0F, 2, 6, 5);
      WallLeftMiddleRight.setRotationPoint(8F, 13F, 5F);
      WallLeftMiddleRight.setTextureSize(128, 32);
      WallLeftMiddleRight.mirror = true;
      setRotation(WallLeftMiddleRight, 0F, 0F, 0F);
      WallBack = new ModelRenderer(this, 80, 0);
      WallBack.addBox(0F, 0F, 0F, 16, 5, 2);
      WallBack.addBox(0F, 11F, 0F, 16, 5, 2);
      WallBack.setRotationPoint(-8F, 8F, 8F);
      WallBack.setTextureSize(128, 32);
      WallBack.mirror = true;
      setRotation(WallBack, 0F, 0F, 0F);
      WallBackMiddleCenter = new ModelRenderer(this, 83, 12);
      WallBackMiddleCenter.addBox(0F, 0F, 0F, 10, 6, 2);
      WallBackMiddleCenter.setRotationPoint(-5F, 13F, 8F);
      WallBackMiddleCenter.setTextureSize(128, 32);
      WallBackMiddleCenter.mirror = true;
      setRotation(WallBackMiddleCenter, 0F, 0F, 0F);
      WallBackMiddleLeft = new ModelRenderer(this, 71, 18);
      WallBackMiddleLeft.addBox(0F, 0F, 0F, 5, 6, 2);
      WallBackMiddleLeft.setRotationPoint(5F, 13F, 8F);
      WallBackMiddleLeft.setTextureSize(128, 32);
      WallBackMiddleLeft.mirror = true;
      setRotation(WallBackMiddleLeft, 0F, 0F, 0F);
      WallBackMiddleRight = new ModelRenderer(this, 71, 18);
      WallBackMiddleRight.addBox(0F, 0F, 0F, 5, 6, 2);
      WallBackMiddleRight.setRotationPoint(-10F, 13F, 8F);
      WallBackMiddleRight.setTextureSize(128, 32);
      WallBackMiddleRight.mirror = true;
      setRotation(WallBackMiddleRight, 0F, 0F, 0F);
      WallFront = new ModelRenderer(this, 80, 0);
      WallFront.addBox(0F, 0F, 0F, 16, 5, 2);
      WallFront.addBox(0F, 11F, 0F, 16, 5, 2);
      WallFront.setRotationPoint(-8F, 8F, -10F);
      WallFront.setTextureSize(128, 32);
      WallFront.mirror = true;
      setRotation(WallFront, 0F, 0F, 0F);
      WallFrontMiddleCenter = new ModelRenderer(this, 83, 12);
      WallFrontMiddleCenter.addBox(0F, 0F, 0F, 10, 6, 2);
      WallFrontMiddleCenter.setRotationPoint(-5F, 13F, -10F);
      WallFrontMiddleCenter.setTextureSize(128, 32);
      WallFrontMiddleCenter.mirror = true;
      setRotation(WallFrontMiddleCenter, 0F, 0F, 0F);
      WallFrontMiddleLeft = new ModelRenderer(this, 71, 18);
      WallFrontMiddleLeft.addBox(0F, 0F, 0F, 5, 6, 2);
      WallFrontMiddleLeft.setRotationPoint(-10F, 13F, -10F);
      WallFrontMiddleLeft.setTextureSize(128, 32);
      WallFrontMiddleLeft.mirror = true;
      setRotation(WallFrontMiddleLeft, 0F, 0F, 0F);
      WallFrontMiddleRight = new ModelRenderer(this, 71, 18);
      WallFrontMiddleRight.addBox(0F, 0F, 0F, 5, 6, 2);
      WallFrontMiddleRight.setRotationPoint(5F, 13F, -10F);
      WallFrontMiddleRight.setTextureSize(128, 32);
      WallFrontMiddleRight.mirror = true;
      setRotation(WallFrontMiddleRight, 0F, 0F, 0F);
      PillarFrontLeft = new ModelRenderer(this, 116, 7);
      PillarFrontLeft.addBox(0F, 0F, 0F, 3, 17, 3);
      PillarFrontLeft.setRotationPoint(8F, 7F, -11F);
      PillarFrontLeft.setTextureSize(128, 32);
      PillarFrontLeft.mirror = true;
      setRotation(PillarFrontLeft, 0F, 0F, 0F);
      PillarFrontRight = new ModelRenderer(this, 116, 7);
      PillarFrontRight.addBox(0F, 0F, 0F, 3, 17, 3);
      PillarFrontRight.setRotationPoint(-11F, 7F, -11F);
      PillarFrontRight.setTextureSize(128, 32);
      PillarFrontRight.mirror = true;
      setRotation(PillarFrontRight, 0F, 0F, 0F);
      PillarRearRight = new ModelRenderer(this, 116, 7);
      PillarRearRight.addBox(0F, 0F, 0F, 3, 17, 3);
      PillarRearRight.setRotationPoint(-11F, 7F, 8F);
      PillarRearRight.setTextureSize(128, 32);
      PillarRearRight.mirror = true;
      setRotation(PillarRearRight, 0F, 0F, 0F);
      PillarRearLeft = new ModelRenderer(this, 116, 7);
      PillarRearLeft.addBox(0F, 0F, 0F, 3, 17, 3);
      PillarRearLeft.setRotationPoint(8F, 7F, 8F);
      PillarRearLeft.setTextureSize(128, 32);
      PillarRearLeft.mirror = true;
      setRotation(PillarRearLeft, 0F, 0F, 0F);
  }

    public void setSideRender(int side, boolean value) {
        if(side < 0 || side > sides.length-1) return;
        sides[side] = value;
    }

    public void setSideRender(Direction side, boolean value) {
        sides[side.ID()] = value;
    }

    public void setSideRender(boolean[] values) {
        if(values.length > 5)
        {
            sides[0] = values[0];
            sides[1] = values[1];
            sides[2] = values[2];
            sides[3] = values[3];
            sides[4] = values[4];
            sides[5] = values[5];
        }
    }

    public void setCurrentFuelScale(float value) { currentFuelScale = value; }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);

      if(currentFuelScale > 0.05F) {
          GL11.glPushMatrix();
          GL11.glTranslatef(0.0F, 1.25F*(1.0F-currentFuelScale), 0.0F);
          GL11.glScalef(1.0F, currentFuelScale, 1.0F);
          Fuel.render(f5);
          GL11.glPopMatrix();
      }

      if(!sides[Direction.DOWN.ID()]) {
          Bottom.render(f5);
      }

      if(!sides[Direction.NORTH.ID()]) {
          WallFront.render(f5);
          GrateFront.render(f5);
      }

      if(!sides[Direction.SOUTH.ID()]) {
          WallBack.render(f5);
          GrateBack.render(f5);
      }
      if(!sides[Direction.EAST.ID()]) {
          WallRight.render(f5);
          GrateRight.render(f5);
      }
      if(!sides[Direction.WEST.ID()]) {
          WallLeft.render(f5);
          GrateLeft.render(f5);
      }

      if(!sides[Direction.NORTH.ID()] && !sides[Direction.SOUTH.ID()]) {
          if(!sides[Direction.EAST.ID()])
              WallRightMiddleCenter.render(f5);
          if(!sides[Direction.WEST.ID()])
              WallLeftMiddleCenter.render(f5);
      }
      if(!sides[Direction.EAST.ID()] && !sides[Direction.WEST.ID()]) {
          if(!sides[Direction.NORTH.ID()])
              WallFrontMiddleCenter.render(f5);
          if(!sides[Direction.SOUTH.ID()])
              WallBackMiddleCenter.render(f5);
      }

      if(!sides[Direction.NORTH.ID()] && !sides[Direction.EAST.ID()]) {
          WallFrontMiddleLeft.render(f5);
          WallRightMiddleRight.render(f5);
          PillarFrontRight.render(f5);
      }
      if(!sides[Direction.NORTH.ID()] && !sides[Direction.WEST.ID()]) {
          WallFrontMiddleRight.render(f5);
          WallLeftMiddleLeft.render(f5);
          PillarFrontLeft.render(f5);
      }
      if(!sides[Direction.SOUTH.ID()] && !sides[Direction.EAST.ID()]) {
          WallBackMiddleRight.render(f5);
          WallRightMiddleLeft.render(f5);
          PillarRearRight.render(f5);
      }
      if(!sides[Direction.SOUTH.ID()] && !sides[Direction.WEST.ID()]) {
          WallBackMiddleLeft.render(f5);
          WallLeftMiddleRight.render(f5);
          PillarRearLeft.render(f5);
      }
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
